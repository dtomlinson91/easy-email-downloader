# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['easy_email_downloader']

package_data = \
{'': ['*']}

setup_kwargs = {
    'name': 'easy-email-downloader',
    'version': '1.0.1',
    'description': '',
    'long_description': '# easy-email-downloader ðŸ“¨\n\n`easy-email-downloader` is a no nonsense and easy way to download emails from an IMAP server in Python with no\n3rd party dependencies.\n\n## Installation\n\n### PyPI\n\n```bash\npip install easy-email-downloader\n```\n\n### From Source\n\nUsing [Poetry](https://python-poetry.org)\n\nClone the repository and run:\n\n```bash\npoetry install\n```\n\n## Usage\n\nTo download emails from an IMAP server:\n\n```python\nfrom easy_email_downloader import EmailFilter, EmailConfig, download_emails\n\nemail_config = EmailConfig(\n    host="mail.example.com", email_address="example@example.com", password="somepassword", mailbox="INBOX", port=993\n)\n\nemail_filter = EmailFilter(\n    subject="daily report",  # subject filtering is server specific - full string matches often won\'t work\n    sender="someone@gmail.com",\n    messages_to_download=1,\n    oldest_first=False,\n    delete_after_download=False,  # be careful setting this to True - emails are permanently removed!\n)\n\ndownloaded_emails = download_emails(\n    email_config=email_config,\n    email_filter=email_filter,\n)\n\nfor downloaded_email in downloaded_emails:\n    print(f"sender: {downloaded_email.sender}")\n    print(f"date: {downloaded_email.date}")\n    print(f"subject: {downloaded_email.subject}")\n    print(f"content_type: {downloaded_email.content_type}")\n    print(f"body: {downloaded_email.body[:50]}")\n    print(f"attachments: {downloaded_email.attachments[:50]}")\n```\n\nWhich produces:\n\n```\nsender: Daniel Tomlinson <dtomlinson@panaetius.co.uk>\ndate: Sat, 23 Apr 2022 20:55:31 +0100\nsubject: Download me using easy-email-sender\ncontent_type: text/html\nbody: Successfully downloaded using easy-email-sender!\nattachments: []\n```\n\nSee below for more information on `EmailFilter`, `EmailConfig`, `download_emails` or see the docstrings.\n### EmailConfig\n\nCreate your `EmailConfig` instance:\n\nIf you know the mailbox you want to download from:\n\n```python\nemail_config = EmailConfig(\n    host="mail.example.com", email_address="example@example.com", password="somepassword", mailbox="INBOX", port=993\n)\n```\n\nIf you don\'t know the mailbox to download from, use `EmailConfig.list_mailboxes`\n\n```\nemail_config = EmailConfig(\n    host="mail.example.com", email_address="example@example.com", password="somepassword", port=993\n)\nuser_mailboxes = email_config.list_mailboxes()\n```\n\nThis will return a list of strings of all the mailboxes in the user\'s account.\n\n`EmailConfig` supports the following arguments:\n\n```\nAttributes:\n    host (str): The host of the IMAP server.\n    email_address (str): The email address to login as.\n    password (str): The password.\n    mailbox (str): The mailbox to download emails from.\n    port (int): The IMAP port of the server.\n```\n\n### EmailFilter\n\nCreate an `EmailFilter` instance:\n\n```python\nemail_filter = EmailFilter(\n    subject="daily report",\n    sender="someone@gmail.com",\n    messages_to_download=1,\n    oldest_first=False,\n    delete_after_download=False,\n)\n```\n\n`subject` and `sender` are optional. Either both, one or none of `subject` and `sender` can be set. If neither are\nprovided all emails in the mailbox will be searched for.\n\n`EmailFilter` supports the following arguments:\n\n```\nAttributes:\n    subject (str | None, optional): The subject to filter by. Defaults to None.\n    sender (str | None, optional): The sender email address to filter by. Defaults to None.\n    messages_to_download (int, optional): The number of emails to download. If -1 will download all. Defaults to -1.\n    oldest_first (bool, optional): Whether to download emails starting with the oldest first. Defaults to False.\n    delete_after_download (bool, optional): Whether to delete the emails after successfully downloading. Defaults to False.\n```\n\nðŸš¨ Be careful with `delete_after_download` - be sure you want to delete the email before you run it. This calls\n`imaplib.IMAP4_SSL.expunge` which **permanently** deletes the email from the server.\n\n### download_emails\n\nDownload emails using the `EmailConfig` and `EmailFilter`:\n\n```python\ndownloaded_emails = download_emails(\n    email_config=email_config,\n    email_filter=email_filter,\n)\n```\n\nThis returns a list of `Email` objects.\n\nThe available attributes on an `Email` object are:\n\n```\nAttributes:\n    sender (str): The sender in the form `first_name last_name <email_address>`.\n    subject (str): The email subject.\n    date (str): The date the email was sent.\n    body (str): The content of the email. This is either in plaintext or as HTML.\n    attachments (List[Optional[bytes]]): A list of attachments (if there are any) as bytes. If no attachments this\n        is an empty list.\n    content_type (str): The content type. Either `text/plain` or `text/html`.\n```\n\nAttachments are stored as a list of bytes. These can be saved to disk using `open("filename", "wb")` in the usual way.\n',
    'author': 'Daniel Tomlinson',
    'author_email': 'dtomlinson@panaetius.co.uk',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/dtomlinson91/easy-email-downloader',
    'packages': packages,
    'package_data': package_data,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
